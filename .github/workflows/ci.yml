name: Continuous Integration

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Install codespell
      run: pip3 install codespell

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format-14 -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]

    runs-on: ubuntu-22.04

    # If you do not wish to use codecov, then simply delete this job from the
    # workflow.
    if: github.repository_owner == 'ulrikpedersen'

    steps:
    - uses: actions/checkout@v3

    - name: Install LCov and boost-python
      run: sudo apt-get update -q
        && sudo apt-get install lcov libboost-python-dev -q -y

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build cmakebuild/coverage -j 2

    - name: Test
      working-directory: cmakebuild/coverage
      run: ctest --output-on-failure -j 2

    - name: Process coverage info
      run: cmake --build cmakebuild/coverage -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v3
      with:
        file: cmakebuild/coverage/coverage.info
        flags: ctest

  sanitize:
    needs: [lint]

    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies - boost-python
      run: sudo apt-get update -q
        && sudo apt-get install libboost-python-dev -q -y

    - name: Configure
      env: { CXX: clang++-14 }
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build cmakebuild/sanitize -j 2

    - name: Test
      working-directory: cmakebuild/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure -j 2

  test:
    needs: [lint]

    strategy:
      matrix:
        os: [macos-12, ubuntu-22.04, windows-2022]

        # type: [shared, static]
        type: [shared]

        include:
        - { type: shared, shared: YES }
        # - { type: static, shared: NO }

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install boost (Windows)
      if: matrix.os == 'windows-2022'
      uses: MarkusJx/install-boost@v2.4.3
      id: install-boost
      with:
          # REQUIRED: Specify the required boost version
          # A list of supported versions can be found here:
          # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
          boost_version: 1.80.0
          platform_version: 2022
          toolset: msvc
        
    - name: Install dependencies static analyzers and boost-python (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: >-
        sudo apt-get install clang-tidy-14 cppcheck libboost-python-dev -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-14 140
    
    - name: Install boost-python (MacOS)
      if: matrix.os == 'macos-12'
      run: brew install boost-python3

    - name: Configure (windows)
      if: matrix.os == 'windows-2022'
      env:
        BOOST_DIR: ${{ steps.install-boost.outputs.BOOST_ROOT }}
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"
        -D BUILD_SHARED_LIBS=${{ matrix.shared }}
        -D Boost_USE_DEBUG_RUNTIME=OFF
        -D Boost_USE_DEBUG_LIBS=OFF
        -D Boost_USE_RELEASE_LIBS=ON
        -D Boost_PYTHON_VERSION=3.11

    - name: Configure (non-windows)
      if: matrix.os != 'windows-2022'
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"
        -D BUILD_SHARED_LIBS=${{ matrix.shared }}

    - name: Build
      run: cmake --build cmakebuild --config Release -j 2

    - name: Install
      run: cmake --install cmakebuild --config Release --prefix prefix

    - name: Test
      working-directory: cmakebuild
      run: ctest --output-on-failure -C Release -j 2

  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test]

    runs-on: ubuntu-22.04

    # To enable, first you have to create an orphaned gh-pages branch:
    #
    #    git switch --orphan gh-pages
    #    git commit --allow-empty -m "Initial commit"
    #    git push -u origin gh-pages
    #
    # Edit the <name> placeholder below to your GitHub name, so this action
    # runs only in your repository and no one else's fork. After these, delete
    # this comment and the last line in the conditional below.
    # If you do not wish to use GitHub Pages for deploying documentation, then
    # simply delete this job similarly to the coverage one.
    if: github.ref == 'refs/heads/main'
      && github.event_name == 'push'
      && github.repository_owner == 'ulrikpedersen'

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Install m.css dependencies
      run: pip3 install jinja2 Pygments

    - name: Install Doxygen and boost-python
      run: sudo apt-get update -q
        && sudo apt-get install doxygen libboost-python-dev -q -y

    - name: Build docs
      run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/cmakebuild"
        -P cmake/docs-ci.cmake

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: cmakebuild/docs/html
